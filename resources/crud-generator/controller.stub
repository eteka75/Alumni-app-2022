<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;
use Auth;

class DummyClass extends Controller
{
    /**
     * Instantiate a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        $keyword = $request->get('search');
        $perPage = {{pagination}};

        $perPage =  $request->input('nb');
        $order =  strtoupper($request->input('order'));
        $search =  $keyword;
        $tab=[5,10,20,30];
        $orders=["ASC","DESC"];
        $nb=$perPage=in_array($perPage,$tab)? $perPage:5;
        if($nb<=5){$nb=5;}
        $order=in_array( $order,$orders)? $order:"ASC";
        $o=$request->input('order');
        $uid = $request->user()->id;

        if (!empty($keyword)) {
             if (Auth::user()->hasRole('SuperU')) {
                ${{crudName}} = {{modelName}}::where('user_id',$uid)
                ->{{whereSnippet}}orderBy("id",$order)->paginate($perPage);
                  }
            elseif(Auth::check() && (Auth::user()->hasRole('Admin') || Auth::check() && Auth::user()->hasRole('Redacteur'))){
                 ${{crudName}} = {{modelName}}::{{whereSnippet}}orderBy("id",$order)->paginate($perPage);
            } 
        } else {
             if (Auth::user()->hasRole('SuperU')) {
                ${{crudName}} = {{modelName}}::orderBy("id",$order)->paginate($perPage);
               }
            elseif(Auth::check() && (Auth::user()->hasRole('Admin') || Auth::check() && Auth::user()->hasRole('Redacteur'))){
                ${{crudName}} = {{modelName}}::where('user_id',$uid)
                ->orderBy("id",$order)->paginate($perPage); 
            }
        }
        return view('{{viewPath}}{{viewName}}.index', compact('{{crudName}}','nb','order','search'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        if($this->is_Admin() || $this->is_Red() || $this->is_SuperU()){  
        return view('{{viewPath}}{{viewName}}.create');
         }else{
             return "Opération non autorisée !";
         }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
         if($this->is_Admin() || $this->is_Red() || $this->is_SuperU()){  
        
        {{validationRules}}
        $requestData = $request->all();
        $uid = $request->user()->id;
        $requestData[ 'user_id']=$uid;
        {{fileSnippet}}
        {{modelName}}::create($requestData);

        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} ajouté(e) avec succès !');
       
         }else{
             return "Opération non autorisée !";
         }
    }

    public function is_Admin(){
        return (Auth::check() &&  Auth::user()->hasRole('Admin'));
    }
    public function is_Red(){
        return (Auth::check() &&  Auth::user()->hasRole('Redacteur'));
    }
    public function is_SuperU(){
        return (Auth::check() &&  Auth::user()->hasRole('SuperU'));
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        
        if($this->is_Admin() || $this->is_Red() || $this->is_SuperU()){            
            ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

            return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}'));
        }else{
             return "Opération non autorisée !";
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        if($this->is_SuperU() ){ 
            ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
            return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
         }
         elseif($this->is_Red() || $this->is_Admin()){
            $uid = Auth::user()->id;
            ${{crudNameSingular}} = {{modelName}}::where('user_id',$uid)->findOrFail($id);
            return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
         }else{
             return "Opération non autorisée !";
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, $id)
    {
         if($this->is_SuperU() ){           
            {{validationRules}}
            $requestData = $request->all();
            {{fileSnippet}}
            ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
            ${{crudNameSingular}}->update($requestData);

            return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', 'Mise à jour effectuée avec succès !');
         }
         elseif($this->is_Red() || $this->is_Admin()){   
            $uid = $request->user()->id;           
            {{validationRules}}
            $requestData = $request->all();
            {{fileSnippet}}
            ${{crudNameSingular}} = {{modelName}}::where('user_id',$uid)->findOrFail($id);
            ${{crudNameSingular}}->update($requestData);

            return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', 'Mise à jour effectuée avec succès !');
         }else{
             return "Opération non autorisée !";
        }
        
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        $uid = Auth::user()->id;
        if($this->is_SuperU() ){     
        {{modelName}}::destroy($id);
        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} supprimé(e) avec succès !');
        }
        elseif($this->is_Red() || $this->is_Admin()){  
            {{modelName}}::where('user_id',$uid)->where('id',$id)->delete();

        return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} supprimé(e) avec succès !');
        }else{
             return "Opération non autorisée !";
        }
    }
}
